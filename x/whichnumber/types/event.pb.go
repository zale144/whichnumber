// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whichnumber/event.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventNewGame struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId        string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	EntryFee      string `protobuf:"bytes,3,opt,name=entry_fee,json=entryFee,proto3" json:"entry_fee,omitempty"`
	MaxPlayers    uint64 `protobuf:"varint,4,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	Reward        string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	CommitTimeout string `protobuf:"bytes,6,opt,name=commit_timeout,json=commitTimeout,proto3" json:"commit_timeout,omitempty"`
}

func (m *EventNewGame) Reset()         { *m = EventNewGame{} }
func (m *EventNewGame) String() string { return proto.CompactTextString(m) }
func (*EventNewGame) ProtoMessage()    {}
func (*EventNewGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_acb596e433f7e024, []int{0}
}
func (m *EventNewGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewGame.Merge(m, src)
}
func (m *EventNewGame) XXX_Size() int {
	return m.Size()
}
func (m *EventNewGame) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewGame.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewGame proto.InternalMessageInfo

func (m *EventNewGame) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventNewGame) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *EventNewGame) GetEntryFee() string {
	if m != nil {
		return m.EntryFee
	}
	return ""
}

func (m *EventNewGame) GetMaxPlayers() uint64 {
	if m != nil {
		return m.MaxPlayers
	}
	return 0
}

func (m *EventNewGame) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *EventNewGame) GetCommitTimeout() string {
	if m != nil {
		return m.CommitTimeout
	}
	return ""
}

type EventRevealTimeout struct {
	GameId          string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	RevealTimeout   string `protobuf:"bytes,2,opt,name=reveal_timeout,json=revealTimeout,proto3" json:"reveal_timeout,omitempty"`
	NumberOfPlayers uint64 `protobuf:"varint,3,opt,name=number_of_players,json=numberOfPlayers,proto3" json:"number_of_players,omitempty"`
}

func (m *EventRevealTimeout) Reset()         { *m = EventRevealTimeout{} }
func (m *EventRevealTimeout) String() string { return proto.CompactTextString(m) }
func (*EventRevealTimeout) ProtoMessage()    {}
func (*EventRevealTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_acb596e433f7e024, []int{1}
}
func (m *EventRevealTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRevealTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRevealTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRevealTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRevealTimeout.Merge(m, src)
}
func (m *EventRevealTimeout) XXX_Size() int {
	return m.Size()
}
func (m *EventRevealTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRevealTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_EventRevealTimeout proto.InternalMessageInfo

func (m *EventRevealTimeout) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *EventRevealTimeout) GetRevealTimeout() string {
	if m != nil {
		return m.RevealTimeout
	}
	return ""
}

func (m *EventRevealTimeout) GetNumberOfPlayers() uint64 {
	if m != nil {
		return m.NumberOfPlayers
	}
	return 0
}

type EventGameEnd struct {
	GameId  string    `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Winners []*Winner `protobuf:"bytes,2,rep,name=winners,proto3" json:"winners,omitempty"`
}

func (m *EventGameEnd) Reset()         { *m = EventGameEnd{} }
func (m *EventGameEnd) String() string { return proto.CompactTextString(m) }
func (*EventGameEnd) ProtoMessage()    {}
func (*EventGameEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_acb596e433f7e024, []int{2}
}
func (m *EventGameEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGameEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGameEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGameEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGameEnd.Merge(m, src)
}
func (m *EventGameEnd) XXX_Size() int {
	return m.Size()
}
func (m *EventGameEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGameEnd.DiscardUnknown(m)
}

var xxx_messageInfo_EventGameEnd proto.InternalMessageInfo

func (m *EventGameEnd) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *EventGameEnd) GetWinners() []*Winner {
	if m != nil {
		return m.Winners
	}
	return nil
}

type Winner struct {
	Player    string `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Proximity uint64 `protobuf:"varint,2,opt,name=proximity,proto3" json:"proximity,omitempty"`
	Reward    string `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *Winner) Reset()         { *m = Winner{} }
func (m *Winner) String() string { return proto.CompactTextString(m) }
func (*Winner) ProtoMessage()    {}
func (*Winner) Descriptor() ([]byte, []int) {
	return fileDescriptor_acb596e433f7e024, []int{3}
}
func (m *Winner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Winner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Winner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Winner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Winner.Merge(m, src)
}
func (m *Winner) XXX_Size() int {
	return m.Size()
}
func (m *Winner) XXX_DiscardUnknown() {
	xxx_messageInfo_Winner.DiscardUnknown(m)
}

var xxx_messageInfo_Winner proto.InternalMessageInfo

func (m *Winner) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *Winner) GetProximity() uint64 {
	if m != nil {
		return m.Proximity
	}
	return 0
}

func (m *Winner) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func init() {
	proto.RegisterType((*EventNewGame)(nil), "zale144.whichnumber.whichnumber.EventNewGame")
	proto.RegisterType((*EventRevealTimeout)(nil), "zale144.whichnumber.whichnumber.EventRevealTimeout")
	proto.RegisterType((*EventGameEnd)(nil), "zale144.whichnumber.whichnumber.EventGameEnd")
	proto.RegisterType((*Winner)(nil), "zale144.whichnumber.whichnumber.Winner")
}

func init() { proto.RegisterFile("whichnumber/event.proto", fileDescriptor_acb596e433f7e024) }

var fileDescriptor_acb596e433f7e024 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0xce, 0xd2, 0x40,
	0x14, 0x65, 0xbe, 0x62, 0x91, 0x41, 0x30, 0xce, 0x42, 0x9a, 0x68, 0x0a, 0x69, 0x42, 0x24, 0x2e,
	0x4a, 0x44, 0x5e, 0x40, 0x13, 0x34, 0x26, 0x46, 0x4d, 0x63, 0x34, 0x71, 0xd3, 0x0c, 0xed, 0x05,
	0xc6, 0x30, 0x9d, 0x66, 0x18, 0x68, 0xeb, 0xca, 0x47, 0xf0, 0x89, 0x5c, 0xbb, 0x64, 0xe9, 0xd2,
	0xc0, 0x8b, 0x98, 0xce, 0x14, 0x2c, 0x0b, 0xf3, 0xed, 0x7a, 0xce, 0xfd, 0x99, 0x73, 0x4e, 0x2f,
	0xee, 0x67, 0x6b, 0x16, 0xad, 0x93, 0x1d, 0x5f, 0x80, 0x9c, 0xc0, 0x1e, 0x12, 0xe5, 0xa7, 0x52,
	0x28, 0x41, 0x06, 0xdf, 0xe8, 0x06, 0x9e, 0xcd, 0x66, 0x7e, 0xad, 0xa1, 0xfe, 0xed, 0xfd, 0x44,
	0xf8, 0xde, 0xbc, 0x1c, 0x78, 0x07, 0xd9, 0x6b, 0xca, 0x81, 0x38, 0xb8, 0x15, 0x49, 0xa0, 0x4a,
	0x48, 0x07, 0x0d, 0xd1, 0xb8, 0x1d, 0x9c, 0x21, 0xe9, 0xe3, 0xd6, 0x8a, 0x72, 0x08, 0x59, 0xec,
	0xdc, 0xe8, 0x8a, 0x5d, 0xc2, 0x37, 0x31, 0x79, 0x84, 0xdb, 0x90, 0x28, 0x59, 0x84, 0x4b, 0x00,
	0xc7, 0xd2, 0xa5, 0xbb, 0x9a, 0x78, 0x05, 0x40, 0x06, 0xb8, 0xc3, 0x69, 0x1e, 0xa6, 0x1b, 0x5a,
	0x80, 0xdc, 0x3a, 0xcd, 0x21, 0x1a, 0x37, 0x03, 0xcc, 0x69, 0xfe, 0xc1, 0x30, 0xe4, 0x21, 0xb6,
	0x25, 0x64, 0x54, 0xc6, 0xce, 0x1d, 0xb3, 0xd5, 0x20, 0x32, 0xc2, 0xbd, 0x48, 0x70, 0xce, 0x54,
	0xa8, 0x18, 0x07, 0xb1, 0x53, 0x8e, 0xad, 0xeb, 0x5d, 0xc3, 0x7e, 0x34, 0xa4, 0xf7, 0x1d, 0x61,
	0xa2, 0x0d, 0x04, 0xb0, 0x07, 0xba, 0xa9, 0xe8, 0xba, 0x58, 0x74, 0x25, 0x76, 0x84, 0x7b, 0x52,
	0x77, 0x5e, 0xd6, 0x1a, 0x33, 0x5d, 0x79, 0x35, 0xff, 0x14, 0x3f, 0x30, 0x09, 0x85, 0x62, 0x79,
	0x11, 0x6f, 0x69, 0xf1, 0xf7, 0x4d, 0xe1, 0xfd, 0xb2, 0x72, 0xe0, 0x7d, 0xad, 0x22, 0x2c, 0xf3,
	0x9b, 0x27, 0xf1, 0xff, 0xdf, 0x7e, 0x81, 0x5b, 0x19, 0x4b, 0x92, 0x72, 0xd5, 0xcd, 0xd0, 0x1a,
	0x77, 0xa6, 0x4f, 0xfc, 0x5b, 0xfe, 0x8f, 0xff, 0x59, 0xf7, 0x07, 0xe7, 0x39, 0xef, 0x13, 0xb6,
	0x0d, 0x55, 0xe6, 0x66, 0x74, 0x9d, 0x1f, 0x31, 0x88, 0x3c, 0xc6, 0xed, 0x54, 0x8a, 0x9c, 0x71,
	0xa6, 0x0a, 0xed, 0xad, 0x19, 0xfc, 0x23, 0x6a, 0x69, 0x5b, 0xf5, 0xb4, 0x5f, 0xbe, 0xfd, 0x75,
	0x74, 0xd1, 0xe1, 0xe8, 0xa2, 0x3f, 0x47, 0x17, 0xfd, 0x38, 0xb9, 0x8d, 0xc3, 0xc9, 0x6d, 0xfc,
	0x3e, 0xb9, 0x8d, 0x2f, 0xd3, 0x15, 0x53, 0xeb, 0xdd, 0xc2, 0x8f, 0x04, 0x9f, 0x54, 0x6a, 0x27,
	0xf5, 0x73, 0xcb, 0xaf, 0x90, 0x2a, 0x52, 0xd8, 0x2e, 0x6c, 0x7d, 0x7d, 0xcf, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xdb, 0xb4, 0xd4, 0x7c, 0x98, 0x02, 0x00, 0x00,
}

func (m *EventNewGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitTimeout) > 0 {
		i -= len(m.CommitTimeout)
		copy(dAtA[i:], m.CommitTimeout)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CommitTimeout)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxPlayers != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MaxPlayers))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EntryFee) > 0 {
		i -= len(m.EntryFee)
		copy(dAtA[i:], m.EntryFee)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EntryFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRevealTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRevealTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRevealTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumberOfPlayers != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumberOfPlayers))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RevealTimeout) > 0 {
		i -= len(m.RevealTimeout)
		copy(dAtA[i:], m.RevealTimeout)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RevealTimeout)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGameEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGameEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGameEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winners) > 0 {
		for iNdEx := len(m.Winners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Winners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Winner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Winner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Winner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Proximity != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Proximity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Player) > 0 {
		i -= len(m.Player)
		copy(dAtA[i:], m.Player)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Player)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventNewGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.EntryFee)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.MaxPlayers != 0 {
		n += 1 + sovEvent(uint64(m.MaxPlayers))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CommitTimeout)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventRevealTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RevealTimeout)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumberOfPlayers != 0 {
		n += 1 + sovEvent(uint64(m.NumberOfPlayers))
	}
	return n
}

func (m *EventGameEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Winners) > 0 {
		for _, e := range m.Winners {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *Winner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Player)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Proximity != 0 {
		n += 1 + sovEvent(uint64(m.Proximity))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventNewGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayers", wireType)
			}
			m.MaxPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRevealTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRevealTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRevealTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevealTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPlayers", wireType)
			}
			m.NumberOfPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPlayers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGameEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGameEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGameEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winners = append(m.Winners, &Winner{})
			if err := m.Winners[len(m.Winners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Winner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Winner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Winner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proximity", wireType)
			}
			m.Proximity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proximity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
