// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whichnumber/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Game struct {
	Id            int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       string          `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	SecretNumber  int64           `protobuf:"varint,3,opt,name=secret_number,json=secretNumber,proto3" json:"secret_number,omitempty"`
	PlayerCommits []*NumberCommit `protobuf:"bytes,4,rep,name=player_commits,json=playerCommits,proto3" json:"player_commits,omitempty"`
	PlayerReveals []*NumberReveal `protobuf:"bytes,5,rep,name=player_reveals,json=playerReveals,proto3" json:"player_reveals,omitempty"`
	Reward        types.Coin      `protobuf:"bytes,6,opt,name=reward,proto3" json:"reward"`
	EntryFee      types.Coin      `protobuf:"bytes,7,opt,name=entry_fee,json=entryFee,proto3" json:"entry_fee"`
	CommitTimeout time.Time       `protobuf:"bytes,8,opt,name=commit_timeout,json=commitTimeout,proto3,stdtime" json:"commit_timeout"`
	RevealTimeout time.Time       `protobuf:"bytes,9,opt,name=reveal_timeout,json=revealTimeout,proto3,stdtime" json:"reveal_timeout"`
	BeforeId      int64           `protobuf:"varint,10,opt,name=beforeId,proto3" json:"beforeId,omitempty"`
	AfterId       int64           `protobuf:"varint,11,opt,name=afterId,proto3" json:"afterId,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_7230199e34d8ba4c, []int{0}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Game) GetSecretNumber() int64 {
	if m != nil {
		return m.SecretNumber
	}
	return 0
}

func (m *Game) GetPlayerCommits() []*NumberCommit {
	if m != nil {
		return m.PlayerCommits
	}
	return nil
}

func (m *Game) GetPlayerReveals() []*NumberReveal {
	if m != nil {
		return m.PlayerReveals
	}
	return nil
}

func (m *Game) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func (m *Game) GetEntryFee() types.Coin {
	if m != nil {
		return m.EntryFee
	}
	return types.Coin{}
}

func (m *Game) GetCommitTimeout() time.Time {
	if m != nil {
		return m.CommitTimeout
	}
	return time.Time{}
}

func (m *Game) GetRevealTimeout() time.Time {
	if m != nil {
		return m.RevealTimeout
	}
	return time.Time{}
}

func (m *Game) GetBeforeId() int64 {
	if m != nil {
		return m.BeforeId
	}
	return 0
}

func (m *Game) GetAfterId() int64 {
	if m != nil {
		return m.AfterId
	}
	return 0
}

type NumberCommit struct {
	Commit        string    `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	PlayerAddress string    `protobuf:"bytes,2,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
	CreatedAt     time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *NumberCommit) Reset()         { *m = NumberCommit{} }
func (m *NumberCommit) String() string { return proto.CompactTextString(m) }
func (*NumberCommit) ProtoMessage()    {}
func (*NumberCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_7230199e34d8ba4c, []int{1}
}
func (m *NumberCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumberCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumberCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumberCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberCommit.Merge(m, src)
}
func (m *NumberCommit) XXX_Size() int {
	return m.Size()
}
func (m *NumberCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberCommit.DiscardUnknown(m)
}

var xxx_messageInfo_NumberCommit proto.InternalMessageInfo

func (m *NumberCommit) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *NumberCommit) GetPlayerAddress() string {
	if m != nil {
		return m.PlayerAddress
	}
	return ""
}

func (m *NumberCommit) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type NumberReveal struct {
	PlayerAddress string    `protobuf:"bytes,1,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
	Number        int64     `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Salt          string    `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	CreatedAt     time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *NumberReveal) Reset()         { *m = NumberReveal{} }
func (m *NumberReveal) String() string { return proto.CompactTextString(m) }
func (*NumberReveal) ProtoMessage()    {}
func (*NumberReveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7230199e34d8ba4c, []int{2}
}
func (m *NumberReveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumberReveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumberReveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumberReveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberReveal.Merge(m, src)
}
func (m *NumberReveal) XXX_Size() int {
	return m.Size()
}
func (m *NumberReveal) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberReveal.DiscardUnknown(m)
}

var xxx_messageInfo_NumberReveal proto.InternalMessageInfo

func (m *NumberReveal) GetPlayerAddress() string {
	if m != nil {
		return m.PlayerAddress
	}
	return ""
}

func (m *NumberReveal) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *NumberReveal) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *NumberReveal) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Game)(nil), "zale144.whichnumber.whichnumber.Game")
	proto.RegisterType((*NumberCommit)(nil), "zale144.whichnumber.whichnumber.NumberCommit")
	proto.RegisterType((*NumberReveal)(nil), "zale144.whichnumber.whichnumber.NumberReveal")
}

func init() { proto.RegisterFile("whichnumber/types.proto", fileDescriptor_7230199e34d8ba4c) }

var fileDescriptor_7230199e34d8ba4c = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xa6, 0x26, 0x8d, 0x37, 0x4d, 0x0e, 0x2b, 0x54, 0x96, 0x1c, 0x9c, 0x28, 0x08, 0x29,
	0x17, 0xd6, 0x4a, 0xa8, 0xc4, 0x85, 0x4b, 0x13, 0x09, 0x54, 0x81, 0x38, 0x58, 0x39, 0x71, 0x89,
	0xd6, 0xf6, 0x24, 0xb1, 0x14, 0x67, 0xa3, 0xdd, 0x4d, 0x4b, 0xf8, 0x8a, 0x8a, 0x8f, 0xe0, 0x5b,
	0x7a, 0xec, 0x81, 0x03, 0x27, 0x40, 0xc9, 0x8f, 0x20, 0xef, 0xda, 0x91, 0x05, 0x95, 0x68, 0xb9,
	0xcd, 0x8c, 0xe6, 0xbd, 0x7d, 0x9e, 0xf7, 0x64, 0xfc, 0xe4, 0x6a, 0x91, 0x44, 0x8b, 0xd5, 0x26,
	0x0d, 0x41, 0xfa, 0x7a, 0xbb, 0x06, 0xc5, 0xd6, 0x52, 0x68, 0x41, 0x3a, 0x9f, 0xf9, 0x12, 0x06,
	0x67, 0x67, 0xac, 0xb4, 0x50, 0xae, 0xdb, 0x5e, 0x24, 0x54, 0x2a, 0x94, 0x1f, 0x72, 0x05, 0xfe,
	0xe5, 0x20, 0x04, 0xcd, 0x07, 0x7e, 0x24, 0x92, 0x95, 0x25, 0x68, 0x3f, 0x9e, 0x8b, 0xb9, 0x30,
	0xa5, 0x9f, 0x55, 0xf9, 0xb4, 0x33, 0x17, 0x62, 0xbe, 0x04, 0xdf, 0x74, 0xe1, 0x66, 0xe6, 0xeb,
	0x24, 0x05, 0xa5, 0x79, 0xba, 0xb6, 0x0b, 0xbd, 0x6f, 0x0e, 0x76, 0xde, 0xf2, 0x14, 0x48, 0x0b,
	0x57, 0x93, 0x98, 0xa2, 0x2e, 0xea, 0x1f, 0x05, 0xd5, 0x24, 0x26, 0x14, 0x1f, 0x47, 0x12, 0xb8,
	0x16, 0x92, 0x56, 0xbb, 0xa8, 0xef, 0x06, 0x45, 0x4b, 0x9e, 0xe1, 0xa6, 0x82, 0x48, 0x82, 0x9e,
	0x5a, 0x69, 0xf4, 0xc8, 0x80, 0x4e, 0xec, 0xf0, 0x83, 0x99, 0x91, 0x09, 0x6e, 0xad, 0x97, 0x7c,
	0x0b, 0x72, 0x1a, 0x89, 0x34, 0x4d, 0xb4, 0xa2, 0x4e, 0xf7, 0xa8, 0xdf, 0x18, 0xbe, 0x60, 0xff,
	0xf8, 0x50, 0x66, 0x09, 0xc6, 0x06, 0x15, 0x34, 0x2d, 0x89, 0xed, 0x54, 0x89, 0x55, 0xc2, 0x25,
	0xf0, 0xa5, 0xa2, 0x8f, 0x1e, 0xc4, 0x1a, 0x18, 0x54, 0xc1, 0x6a, 0x3b, 0x45, 0x5e, 0xe1, 0x9a,
	0x84, 0x2b, 0x2e, 0x63, 0x5a, 0xeb, 0xa2, 0x7e, 0x63, 0xf8, 0x94, 0xd9, 0x5b, 0xb3, 0xec, 0xd6,
	0x2c, 0xbf, 0x35, 0x1b, 0x8b, 0x64, 0x35, 0x72, 0x6e, 0x7e, 0x74, 0x2a, 0x41, 0xbe, 0x4e, 0x5e,
	0x63, 0x17, 0x56, 0x5a, 0x6e, 0xa7, 0x33, 0x00, 0x7a, 0x7c, 0x3f, 0x6c, 0xdd, 0x20, 0xde, 0x00,
	0x90, 0x77, 0xb8, 0x65, 0x6f, 0x33, 0xcd, 0x4c, 0x11, 0x1b, 0x4d, 0xeb, 0x86, 0xa2, 0xcd, 0xac,
	0x69, 0xac, 0x30, 0x8d, 0x4d, 0x0a, 0xd3, 0x46, 0xf5, 0x8c, 0xe3, 0xfa, 0x67, 0x07, 0x05, 0x4d,
	0x8b, 0x9d, 0x58, 0x68, 0x46, 0x66, 0x4f, 0x72, 0x20, 0x73, 0x1f, 0x42, 0x66, 0xb1, 0x05, 0x59,
	0x17, 0xd7, 0x43, 0x98, 0x09, 0x09, 0x17, 0x31, 0xc5, 0x99, 0xb9, 0x46, 0x3b, 0x0a, 0x0e, 0x53,
	0xe2, 0xe1, 0x63, 0x3e, 0xd3, 0x20, 0x2f, 0x62, 0xda, 0x28, 0x2d, 0x14, 0xc3, 0xde, 0x17, 0x84,
	0x4f, 0xca, 0x46, 0x92, 0x53, 0x5c, 0xb3, 0x82, 0x4d, 0xc4, 0xdc, 0x20, 0xef, 0xc8, 0xf3, 0x83,
	0xa3, 0x3c, 0x8e, 0x25, 0x28, 0x95, 0xa7, 0x2d, 0xb7, 0xe8, 0xdc, 0x0e, 0xc9, 0x18, 0x63, 0x13,
	0x3f, 0x88, 0xa7, 0x5c, 0x9b, 0xc0, 0xdd, 0xf7, 0xd3, 0xdc, 0x1c, 0x77, 0xae, 0x7b, 0x5f, 0x0f,
	0xa2, 0xac, 0xf3, 0x77, 0x3c, 0x8e, 0xee, 0x7a, 0xfc, 0x14, 0xd7, 0xf2, 0xa4, 0x57, 0x4d, 0xd2,
	0xf3, 0x8e, 0x10, 0xec, 0x28, 0xbe, 0xb4, 0x72, 0xdc, 0xc0, 0xd4, 0x7f, 0x08, 0x75, 0xfe, 0x4b,
	0xe8, 0xe8, 0xfd, 0xcd, 0xce, 0x43, 0xb7, 0x3b, 0x0f, 0xfd, 0xda, 0x79, 0xe8, 0x7a, 0xef, 0x55,
	0x6e, 0xf7, 0x5e, 0xe5, 0xfb, 0xde, 0xab, 0x7c, 0x1c, 0xce, 0x13, 0xbd, 0xd8, 0x84, 0x2c, 0x12,
	0xa9, 0x9f, 0x47, 0xde, 0x2f, 0xff, 0x52, 0x3e, 0xf9, 0x7f, 0xfd, 0x60, 0xc2, 0x9a, 0x79, 0xf6,
	0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0xe5, 0x4e, 0xfd, 0x7c, 0x04, 0x00, 0x00,
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AfterId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AfterId))
		i--
		dAtA[i] = 0x58
	}
	if m.BeforeId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BeforeId))
		i--
		dAtA[i] = 0x50
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.RevealTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.RevealTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CommitTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CommitTimeout):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.EntryFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.PlayerReveals) > 0 {
		for iNdEx := len(m.PlayerReveals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerReveals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PlayerCommits) > 0 {
		for iNdEx := len(m.PlayerCommits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerCommits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SecretNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SecretNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NumberCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumberCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NumberCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTypes(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if len(m.PlayerAddress) > 0 {
		i -= len(m.PlayerAddress)
		copy(dAtA[i:], m.PlayerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PlayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NumberReveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumberReveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NumberReveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintTypes(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerAddress) > 0 {
		i -= len(m.PlayerAddress)
		copy(dAtA[i:], m.PlayerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PlayerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SecretNumber != 0 {
		n += 1 + sovTypes(uint64(m.SecretNumber))
	}
	if len(m.PlayerCommits) > 0 {
		for _, e := range m.PlayerCommits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PlayerReveals) > 0 {
		for _, e := range m.PlayerReveals {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.Reward.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.EntryFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CommitTimeout)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.RevealTimeout)
	n += 1 + l + sovTypes(uint64(l))
	if m.BeforeId != 0 {
		n += 1 + sovTypes(uint64(m.BeforeId))
	}
	if m.AfterId != 0 {
		n += 1 + sovTypes(uint64(m.AfterId))
	}
	return n
}

func (m *NumberCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PlayerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *NumberReveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovTypes(uint64(m.Number))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretNumber", wireType)
			}
			m.SecretNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCommits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerCommits = append(m.PlayerCommits, &NumberCommit{})
			if err := m.PlayerCommits[len(m.PlayerCommits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerReveals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerReveals = append(m.PlayerReveals, &NumberReveal{})
			if err := m.PlayerReveals[len(m.PlayerReveals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CommitTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.RevealTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeId", wireType)
			}
			m.BeforeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterId", wireType)
			}
			m.AfterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumberCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumberCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumberCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumberReveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumberReveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumberReveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
